// Generated by CoffeeScript 1.4.0
var Build, action, ant, colors, fs, hound, java;

fs = require('fs');

hound = require('hound');

colors = require('colors');

java = require('java');

ant = require('./ant');

action = require('./action');

module.exports = Build = (function() {

  function Build() {}

  Build.writeLine = function(line) {
    return ant.writeLine(' build '.green, ': '.bold.white + line);
  };

  Build.compile = function(argv, file) {
    var _this = this;
    java.classpath.push(__dirname);
    return java.callStaticMethod('noyd.compile.Compiler', 'compileErrors', file, function(err, result) {
      var compileError, errors, _i, _len;
      if (err) {
        _this.writeLine(err.bold.red);
      } else {
        errors = 0;
        for (_i = 0, _len = result.length; _i < _len; _i++) {
          compileError = result[_i];
          if (compileError.match(/does not exist/)) {
            continue;
          }
          if (compileError.match(/cannot find symbol/)) {
            continue;
          }
          if (compileError.match(/method does not override/)) {
            continue;
          }
          if (compileError.match(/incompatible types/)) {
            continue;
          }
          errors++;
          _this.writeLine(compileError.split('\n')[0].bold.red);
        }
        if (errors === 0) {
          _this.writeLine('syntax ok'.bold.green);
          return action.run(argv, file);
        }
      }
    });
  };

  Build.watchDir = function(argv, dir, callback) {
    var watcher;
    this.writeLine('watching ' + dir + ' directory for changes');
    watcher = hound.watch(dir);
    watcher.on('change', callback);
    return watcher.on('create', function(file) {
      if (file.match(/\.class$/)) {
        return fs.unlink(file, function(err) {});
      }
    });
  };

  Build.run = function(argv) {
    var _this = this;
    return fs.stat('./build.xml', function(err, stats) {
      if (err && err.code === 'ENOENT') {
        _this.writeLine('expected ./build.xml file'.bold.red);
      }
      if (err) {
        return;
      }
      return _this.watchDir(argv, './src', function(file, stats) {
        if (file.match(/\.java$/)) {
          _this.writeLine(('detected changed file: ' + file).bold.white);
          return _this.compile(argv, file);
        }
      });
    });
  };

  return Build;

})();
