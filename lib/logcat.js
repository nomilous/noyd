// Generated by CoffeeScript 1.4.0
var Logcat, argv, child_process, colors;

child_process = require('child_process');

colors = require('colors');

argv = require('optimist').usage("Filter output from adb logcat.\n\nUsage: noyd --logcat -w YourLogTag").demand('l').boolean('l').alias('l', 'logcat').describe('l', 'Start the android log stream.').alias('w', 'white').describe('w', 'Match to whiten.').boolean('s').alias('s', 'silent').describe('s', 'Only show matches and exceptions').argv;

module.exports = Logcat = (function() {

  function Logcat() {}

  Logcat.processLine = function(line) {
    var first2;
    if (line.length === 0) {
      return;
    }
    if (argv.white && line.match(argv.white)) {
      return console.log(line.white.bold);
    } else {
      first2 = line.slice(0, 2);
      switch (first2) {
        case 'E/':
          if (line.match(/Exception/)) {
            return console.log(line.bold.red);
          } else if (line.match(/\tat\s/)) {
            return console.log(line.red);
          } else {
            if (!argv.silent) {
              return console.log(line.grey);
            }
          }
          break;
        default:
          if (!argv.silent) {
            return console.log(line.grey);
          }
      }
    }
  };

  Logcat.run = function() {
    var child, options,
      _this = this;
    child = null;
    process.on('SIGINT', function() {
      return child.kill();
    });
    if (argv.logcat) {
      options = ['logcat'];
      child = child_process.spawn('adb', options);
      return child.stdout.on('data', function(data) {
        var buffer, line, _i, _len, _ref, _results;
        buffer = new Buffer(data);
        _ref = buffer.toString().split('\n');
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          line = _ref[_i];
          _results.push(_this.processLine(line));
        }
        return _results;
      });
    }
  };

  return Logcat;

})();
