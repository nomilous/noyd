// Generated by CoffeeScript 1.4.0
var Logcat, ant, child_process, colors;

child_process = require('child_process');

colors = require('colors');

ant = require('./ant');

module.exports = Logcat = (function() {

  function Logcat() {}

  Logcat.writeLine = function(line) {
    return ant.writeLine('logcat '.blue + ': '.bold.white, line);
  };

  Logcat.processLine = function(argv, line) {
    var first2;
    if (line.length === 0) {
      return;
    }
    if (argv.tag && line.match(argv.tag)) {
      return this.writeLine(line.white.bold);
    } else {
      first2 = line.slice(0, 2);
      switch (first2) {
        case 'E/':
          if (line.match(/Exception/)) {
            return this.writeLine(line.bold.red);
          } else if (line.match(/\tat\s/)) {
            return this.writeLine(line.red);
          } else {
            if (!argv.silent) {
              return this.writeLine(line.grey);
            }
          }
          break;
        default:
          if (!argv.silent) {
            return this.writeLine(line.grey);
          }
      }
    }
  };

  Logcat.run = function(argv) {
    var child, options,
      _this = this;
    child = null;
    process.on('SIGINT', function() {
      return child.kill();
    });
    options = ['logcat'];
    child = child_process.spawn('adb', options);
    return child.stdout.on('data', function(data) {
      var buffer, line, _i, _len, _ref, _results;
      buffer = new Buffer(data);
      _ref = buffer.toString().split('\n');
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        line = _ref[_i];
        _results.push(_this.processLine(argv, line));
      }
      return _results;
    });
  };

  return Logcat;

})();
